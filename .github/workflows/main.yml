name: Deploy React Frontend to S3 (Main & Develop Only)

on:
  push:
    branches:
      - main    # Deploy to Prod
      - dev # Deploy to Dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev  # Specify the environment (e.g., dev, staging, prod)

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Fetch only the latest commit for efficiency

      - name: Set Environment Variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ env.S3_BUCKET_NAME }}" >> $GITHUB_ENV
            echo "CF_DISTRIBUTION=${{ env.CF_DISTRIBUTION }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
            echo "S3_BUCKET=${{ env.S3_BUCKET_NAME }}" >> $GITHUB_ENV
            echo "CF_DISTRIBUTION=${{ env.CF_DISTRIBUTION }}" >> $GITHUB_ENV
          else
            echo "Skipping deployment for non-deployment branches."
            exit 0  # Exit if not `main` or `develop`
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_S3_IAM_SECRET }}
          aws-region: us-east-1

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18  # Use the correct Node.js version

      - name: Install Dependencies & Build React App
        run: |
          npm install
          npm run build

      - name: Deploy `dist/` Folder to S3
        run: |
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} --delete --exact-timestamps --metadata-directive REPLACE

      - name: Ensure `index.html` is uploaded with correct content-type
        run: |
          aws s3 cp dist/index.html s3://${{ env.S3_BUCKET }}/index.html --content-type "text/html"

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ env.CF_DISTRIBUTION }} --paths "/*"
