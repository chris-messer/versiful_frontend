name: Deploy React Frontend to S3 (Environment-Specific)

on:
  push:
    branches:
      - main      # Deploy to Prod
      - dev       # Deploy to Dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    env:
      S3_BUCKET: ${{ vars.S3_BUCKET }}
      CF_DISTRIBUTION: ${{ vars.CF_DISTRIBUTION }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Debug Environment and Secrets
        run: |
          echo "Branch: ${{ github.ref }}"
          echo "Environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}"
          echo "S3_BUCKET: $S3_BUCKET"
          echo "CF_DISTRIBUTION: $CF_DISTRIBUTION"

          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "ðŸš¨ AWS_ACCESS_KEY_ID is missing!"
          else
            echo "âœ… AWS_ACCESS_KEY_ID is set."
          fi

          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "ðŸš¨ AWS_SECRET_ACCESS_KEY is missing!"
          else
            echo "âœ… AWS_SECRET_ACCESS_KEY is set."
          fi

          if [ -z "$S3_BUCKET" ]; then
            echo "ðŸš¨ S3_BUCKET is missing!"
          else
            echo "âœ… S3_BUCKET is set."
          fi

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-1

      # - name: Install Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 18

      # - name: Install Dependencies & Build React App
      #   run: |
      #     npm install
      #     npm run build

      # - name: Deploy `dist/` Folder to S3
      #   run: |
      #     aws s3 sync dist/ s3://$S3_BUCKET --delete --exact-timestamps --metadata-directive REPLACE

      # - name: Ensure `index.html` is uploaded with correct content-type
      #   run: |
      #     aws s3 cp dist/index.html s3://$S3_BUCKET/index.html --content-type "text/html"

      # - name: Invalidate CloudFront Cache
      #   run: |
      #     aws cloudfront create-invalidation --distribution-id $CF_DISTRIBUTION --paths "/*"
